import fs, { fstat, fstatSync } from "node:fs";
import path from "node:path";
import os from "node:os";
let RootDir = import.meta.url;

RootDir = RootDir.replace("file://","");
RootDir = RootDir.replace("gen.mjs","");

let TxtDir = path.resolve(RootDir,"txt");
let MarkDownDir = path.resolve(RootDir,"markdown");
let HtmlDir = path.resolve(RootDir,"html");

let folder = fs.readdirSync(TxtDir);

function txtToHtml(data,fileHtmlDir){
    console.log(`Generating HTML : ${fileHtmlDir}`);
    let Paragraph  = [];
    let HtmlParagraph = [];
    let pointer = 0;
    for(let i = 0; i<data.length; i++){
        if(data.charCodeAt(i) === 10 ){
            let words = data.substring(pointer,i);
            let html = `<p>${words}</p>`;
            if(pointer === 0){
                html = `<h3>${words}</h3>`;
            }
            pointer=i+1;
            if(words.includes('"')){
                words.replace('"',"&#34;");
            }

            Paragraph.push(words);
            if(html != "<p></p>"){
                HtmlParagraph.push(html);
            }
        }
    }

    HtmlParagraph.push(`<p>Generated From : piwan/Docs/gen.mjs`);
    HtmlParagraph.push(`<p>Generated Time : ${new Date()}`);
    HtmlParagraph.push(`<p>Generated By   : ${os.hostname()}</p>`);
    let htmlData = HtmlParagraph.join("\n");
    fs.writeFileSync(fileHtmlDir,htmlData);
}

for(let file of folder){
    let fileDir = path.resolve(TxtDir,file);
    let fileMarkDownDir= path.resolve(MarkDownDir,file);
    let fileHtmlDir = path.resolve(HtmlDir,file.replace(".txt",".html"));
    if(file.includes(".txt")){
        try{
            fs.readFile(fileDir,'ascii',(err,data)=>{
                txtToHtml(data,fileHtmlDir);
            });
        }catch(e){
            console.err(e);
        }
    }else{
        try{
            console.log(fileDir);
        }catch(e){
            console.error(e);
        }

    }
    
}